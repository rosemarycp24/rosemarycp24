# Function to parse YAML-like file
def parse_yaml(file_path):
    output_dict = {}
    current_dict = output_dict
    stack = []
    with open(file_path, 'r') as file:
        for line in file:
            indent = len(line) - len(line.lstrip(' '))
            key_value = line.strip().split(':')
            while len(stack) > indent:
                stack.pop()
                current_dict = output_dict
                for item in stack:
                    current_dict = current_dict[item]
            key = key_value[0]
            if len(key_value) == 1:  # If it's a dictionary
                if key not in current_dict:
                    current_dict[key] = {}
                stack.append(key)
                current_dict = current_dict[key]
            else:  # It's a leaf item
                value = key_value[1].strip()
                current_dict[key] = value  # Assign the value to the key in the current dictionary

    return output_dict

# Parse the file
data = parse_yaml('/home/chowarro-adm/release.yaml')

# Write lists to text files
def write_list_to_file(file_name, data_list):
    with open(file_name, 'w') as f:
        for item in data_list:
            f.write("{}\n".format(item))

# Sample usage, make sure the keys exist in the parsed data
write_list_to_file('Deploy-EMEProjectsList.txt', data['Build']['abinitio']['EMEProjectsList'])
write_list_to_file('Deploy-DatabaseScripts.txt', data['Build']['database']['DatabaseScripts'])
write_list_to_file('Deploy-CCJobList.txt', data['Deploy']['CCJobList'])
write_list_to_file('Deploy-WebServiceCommandList.txt', data['Deploy']['WebServiceCommandList'])
write_list_to_file('Deploy-AbinitoCommandList.txt', data['Deploy']['AbinitoCommandList'])
write_list_to_file('Rollback-DatabaseScripts.txt', data['Rollback']['database']['DatabaseScripts'])
